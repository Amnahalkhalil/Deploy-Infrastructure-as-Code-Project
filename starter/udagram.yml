Description: >
  Amnah Alshammari / Udagram Web App Infrastructure

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    ConstraintDescription: Must be a valid EC2 instance type from the allowed list.
  
  AmiId:
    Description: AMI ID for the EC2 instance
    Type: String

  ProjectTag:
    Description: Project tag used for naming resources
    Type: String

Resources:

  # Role for EC2 to interact with S3
  EC2AssetRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
            - sts:AssumeRole
      Policies:
        - PolicyName: S3AssetAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - s3:GetObject
                - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${AssetsBucket}/*'

  # IAM Instance profile for EC2
  EC2AssetAccessProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EC2AssetRole

  # S3 bucket to hold static content for the application
  AssetsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'udagram-assets'

  EC2SecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties: 
        VpcId: 'vpc-02accfe052b43cadc'
        GroupDescription: "Enable SSH and HTTP access"
        SecurityGroupIngress: 
          - CidrIp: "0.0.0.0/0"
            IpProtocol: "tcp"
            FromPort: '22'
            ToPort: '22'
          - CidrIp: "0.0.0.0/0"
            IpProtocol: "tcp"
            FromPort: '80'
            ToPort: '80'

  AppServer:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: 'subnet-0a03265ce5f676794'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          apt-get install apache2 -y
          wget -P /var/www/html https://udagram-assets.s3.amazonaws.com/index.html
          systemctl start apache2.service
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2AssetAccessProfile
      KeyName: "MyKeyPair" 
      SecurityGroupIds:
        - !Ref EC2SecurityGroup

  AppServerLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: 'UdagramLaunchTemplate'
      VersionDescription: 'Udagram version 1.0'
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !Ref AmiId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update
            apt-get install apache2 -y
            wget -P /var/www/html https://udagram-assets.s3.amazonaws.com/index.html
            systemctl start apache2.service
        IamInstanceProfile:
          Name: !Ref EC2AssetAccessProfile
        KeyName: "MyKeyPair" 
        SecurityGroupIds:
          - !Ref EC2SecurityGroup

# Auto Scaling Group
  AppServerAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchTemplate:
        LaunchTemplateName: 'UdagramLaunchTemplate'
        Version: !GetAtt AppServerLaunchTemplate.LatestVersionNumber
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'
      VPCZoneIdentifier:
        - "subnet-0fa3ca966840aea21" 
        - "subnet-0a0d87a60a05b0542"

# ALB Security Group
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      VpcId: 'vpc-02accfe052b43cadc'
      GroupDescription: "Enable HTTP access via port 80"
      SecurityGroupIngress: 
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "tcp"
          FromPort: '80'
          ToPort: '80'

# Application Load Balancer
  AppLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties: 
      Name: "UdagramALB"
      Subnets: 
        - "subnet-0fa3ca966840aea21" 
        - "subnet-0a0d87a60a05b0542"
      SecurityGroups:
        - !Ref ALBSecurityGroup

# ALB Target Group
  AppALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: "UdagramTargetGroup"
      Port: 80
      Protocol: HTTP
      VpcId: "vpc-02accfe052b43cadc"
      TargetType: "instance"

# ALB Listener
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppALBTargetGroup
    

Outputs:

  # Output the name of the S3 Bucket
  StaticResourcesBucketName:
    Description: "Name of the S3 bucket for static assets."
    Value: !Ref AssetsBucket

  # Output the ARN of the EC2 IAM Role
  EC2AssetRoleARN:
    Description: "ARN of the EC2 IAM role for asset access."
    Value: !GetAtt EC2AssetRole.Arn

  # Output the Public IP of the Application Server
  AppServerPublicIP:
    Description: "Public IP of the application server."
    Value: !GetAtt AppServer.PublicIp
